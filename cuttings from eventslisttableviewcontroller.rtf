{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red28\green0\blue207;
\red170\green13\blue145;\red196\green26\blue22;\red92\green38\blue153;\red63\green110\blue116;\red46\green13\blue110;
\red38\green71\blue75;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh12780\viewkind0
\deftab560
\pard\tx560\pardeftab560\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0    \cf2 //reload data from server asynchronously\cf0 \
    dispatch_async(dispatch_get_global_queue(\cf3 DISPATCH_QUEUE_PRIORITY_DEFAULT\cf0 , \cf4 0\cf0 ), ^\{  \
        \
\
        \
        UIApplication *app = [UIApplication sharedApplication];  \
        [app setNetworkActivityIndicatorVisible:\cf5 YES\cf0 ]; \
        \
        \cf5 BOOL\cf0  loaded =  [\cf5 self\cf0  getDataFromServer];\
        \
        fetchingSearchResults = \cf5 NO\cf0 ;\
        [refreshSpinner stopAnimating];\
        [app setNetworkActivityIndicatorVisible:\cf5 NO\cf0 ];\
        \
        dispatch_sync(\cf3 dispatch_get_main_queue\cf0 (), ^\{\
            \cf5 if\cf0  (!loaded)\
            \{\
                \cf2 //alert user the are not connected to the server\cf0 \
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:\cf6 @"Fetch data"\cf0  message:\cf6 @"Could not retrieve the data"\cf0  delegate:\cf5 self\cf0  cancelButtonTitle:\cf6 @"OK"\cf0  otherButtonTitles:\cf5 nil\cf0 , \cf5 nil\cf0 ];\
                [alert show];\
            \}\
            \cf2 // put the data into the table\cf0 \
            \cf2 //[self refreshTableView];\cf0 \
            [\cf5 self\cf0 .tableView reloadData];\
        \});\
    \});\
\}\
\
- (\cf5 BOOL\cf0 )getDataFromServer\{\
\
    \
    \cf2 //get the data from the server\cf0 \
    \cf7 NSError\cf0 * error = \cf5 nil\cf0 ;    \
    \cf2 //url will depend on the query\cf0 \
    NSURL *url;\
    \cf5 if\cf0  (\cf8 advancedURL\cf0 )\
    \{\
        \cf9 NSLog\cf0 (\cf6 @"advance ur: %@"\cf0 , \cf8 advancedURL\cf0 );\
        url = \cf8 advancedURL\cf0 ;\
    \}\
    \cf5 else\cf0  \cf5 if\cf0  (\cf8 contact\cf0 ) \cf2 // if there is a contact ID perform the search by contact\cf0 \
    \{\
        url = [[\cf7 NSURL\cf0  \cf9 alloc\cf0 ] \cf9 initWithString\cf0 :[\cf8 appURL\cf0  \cf9 stringByAppendingFormat\cf0 :\cf6 @"/service1.asmx/searchEventsByContact?searchContactID=%@"\cf0 ,\cf8 contact\cf0 .\cf8 contactID\cf0 ]];\
    \}\
    \cf5 else\cf0  \cf5 if\cf0  (\cf8 company\cf0 ) \cf2 // if there is a company site id perform the search by company site\cf0 \
    \{\
        url = [[\cf7 NSURL\cf0  \cf9 alloc\cf0 ] \cf9 initWithString\cf0 :[\cf8 appURL\cf0  \cf9 stringByAppendingFormat\cf0 :\cf6 @"/service1.asmx/searchEventsByCompany?searchCompanySiteID=%@"\cf0 ,\cf8 company\cf0 .\cf8 companySiteID\cf0 ]];\
    \}\
    \cf5 else\cf0 \
    \{\
        \cf2 // a contact id or site id are required to perform the search so return 0 to indicate failure.\cf0 \
        \cf5 return\cf0  \cf4 0\cf0 ;\
    \}\
    \
    \cf7 NSString\cf0  *xmlString = [[\cf7 NSString\cf0  \cf9 alloc\cf0 ] \cf9 initWithContentsOfURL\cf0 :url \cf9 encoding\cf0 :\cf9 NSUTF8StringEncoding\cf0  \cf9 error\cf0 :\cf5 nil\cf0 ];\
    \cf2 //remove xmlns from the xml file \cf0 \
    xmlString = [xmlString \cf9 stringByReplacingOccurrencesOfString\cf0 :\cf6 @"xmlns"\cf0  \cf9 withString\cf0 :\cf6 @"noNSxml"\cf0 ];\
    \cf9 NSLog\cf0 (\cf6 @"xml string: %@"\cf0 ,xmlString);\
    \cf7 NSData\cf0  *xmlData = [xmlString \cf9 dataUsingEncoding\cf0 :\cf9 NSUTF8StringEncoding\cf0 ];\
    \cf8 DDXMLDocument\cf0  *eventsDocument = [[\cf8 DDXMLDocument\cf0  \cf9 alloc\cf0 ] \cf10 initWithData\cf0 :xmlData \cf10 options\cf0 :\cf4 0\cf0  \cf10 error\cf0 :&error];\
    \
\
    \
    \cf5 if\cf0  (error)\
        \cf5 return\cf0  \cf5 NO\cf0 ;\
    \
    \cf7 NSArray\cf0 * nodes = \cf5 nil\cf0 ;\
    nodes = [[eventsDocument \cf10 rootElement\cf0 ] \cf10 children\cf0 ];\
    \
    \cf7 NSMutableArray\cf0  *eventsArray = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
    \
    \cf5 for\cf0  (\cf8 DDXMLElement\cf0  *element \cf5 in\cf0  nodes)\
    \{ \
        \cf8 eventSearch\cf0  *currentEvent = [[\cf8 eventSearch\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
        \cf8 DDXMLElement\cf0  *eveNumber = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveNumber"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveNumber\cf0  = eveNumber.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveStatus = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveStatus"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveStatus\cf0  = eveStatus.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveTitle = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveTitle"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveTitle\cf0  = eveTitle.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *ourContactID = [[element \cf10 nodesForXPath\cf0 :\cf6 @"ourContactID"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 ourContactID\cf0  = ourContactID.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eventType = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eventType"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eventType\cf0  = eventType.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eventType2 = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eventType2"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eventType2\cf0  = eventType2.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eventPriority = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eventPriority"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eventPriority\cf0  = eventPriority.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *companySiteID = [[element \cf10 nodesForXPath\cf0 :\cf6 @"companySiteID"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 companySiteID\cf0  = companySiteID.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eventID = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eventID"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eventID\cf0  = eventID.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *contactID = [[element \cf10 nodesForXPath\cf0 :\cf6 @"contactID"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 contactID\cf0  = contactID.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveComments = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveComments"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveComments\cf0  = eveComments.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveCreatedDate = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveCreatedDate"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        \
        \cf2 //currentEvent.eveCreatedDate = eveCreatedDate.stringValue;\cf0 \
        \
        \cf8 DDXMLElement\cf0  *eveCreatedTime = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveCreatedTime"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveCreatedTime\cf0  = eveCreatedTime.\cf7 stringValue\cf0 ;        \
        \cf8 DDXMLElement\cf0  *eveDueDate = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveDueDate"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        \
        \cf7 NSString\cf0  *stringDate = eveDueDate.\cf7 stringValue\cf0 ;\
        \cf5 if\cf0  ([stringDate \cf9 isEqualToString\cf0 :\cf6 @""\cf0 ])\
            stringDate = \cf6 @"01/01/9999 00:00:00"\cf0 ;\
        \cf7 NSDateFormatter\cf0  *df = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
        [df \cf9 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy HH:mm:ss"\cf0 ];\
        currentEvent.\cf8 eveDueDate\cf0  = [df \cf9 dateFromString\cf0 :stringDate];\
    \
        \cf7 NSString\cf0  *stringCreatedDate = eveCreatedDate.\cf7 stringValue\cf0 ;\
        \cf5 if\cf0  ([stringCreatedDate \cf9 isEqualToString\cf0 :\cf6 @""\cf0 ])\
            stringCreatedDate = \cf6 @"01/01/9999 00:00:00"\cf0 ;\
        currentEvent.\cf8 eveCreatedDate\cf0  = [df \cf9 dateFromString\cf0 :stringCreatedDate];\
\
        \cf8 DDXMLElement\cf0  *eveDueTime = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveDueTime"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveDueTime\cf0  = eveDueTime.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveEndDate = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveEndDate"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveEndDate\cf0  = eveEndDate.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveEndTime = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveEndTime"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveEndTime\cf0  = eveEndTime.\cf7 stringValue\cf0 ;\
        \cf8 DDXMLElement\cf0  *eveCreatedBy = [[element \cf10 nodesForXPath\cf0 :\cf6 @"eveCreatedBy"\cf0  \cf10 error\cf0 :\cf5 nil\cf0 ] \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
        currentEvent.\cf8 eveCreatedBy\cf0  = eveCreatedBy.\cf7 stringValue\cf0 ;\
        \
        [eventsArray \cf9 addObject\cf0 :currentEvent];\
    \}\
    \cf2 //if no events were returned dont continue;\cf0 \
    \cf5 if\cf0  ([eventsArray \cf9 count\cf0 ] == \cf4 0\cf0 )\
        \cf5 return\cf0  \cf5 YES\cf0 ;\
    \
    \cf5 if\cf0  (!\cf8 orderByCreatedDate\cf0 )\
    \{\
                \cf7 NSSortDescriptor\cf0  *dateSortDescriptor = [[\cf7 NSSortDescriptor\cf0  \cf9 alloc\cf0 ] \cf9 initWithKey\cf0 :\cf6 @"eveDueDate"\cf0 \
                                                    \cf9 ascending\cf0 :\cf5 YES\cf0 ];\
                \cf7 NSSortDescriptor\cf0  *timeSortDescriptor = [[\cf7 NSSortDescriptor\cf0  \cf9 alloc\cf0 ]\
                                                        \cf9 initWithKey\cf0 :\cf6 @"eveDueTime"\cf0  \cf9 ascending\cf0 :\cf5 YES\cf0 ];\
                \cf7 NSArray\cf0  *sortedArray = [eventsArray \cf9 sortedArrayUsingDescriptors\cf0 :[\cf7 NSArray\cf0  \cf9 arrayWithObjects\cf0 :dateSortDescriptor,timeSortDescriptor,\cf5 nil\cf0 ]];\
                \
                \cf2 //initialist the ordered array\cf0 \
                \cf8 orderedEventsArray\cf0  = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                \
                \cf2 //TODO make This better:\cf0 \
                \cf2 //once the events have been loaded, sort them into an array of dictionaries so they can be grouped on the tableview:\cf0 \
\
                \cf8 eventSearch\cf0  *event = [sortedArray \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
                \cf7 NSDate\cf0  *currentDate = event.\cf8 eveDueDate\cf0 ;\
                \cf7 NSMutableArray\cf0  *tempIDArray = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                \cf5 for\cf0  (\cf5 int\cf0  i = \cf4 0\cf0 ; i < [sortedArray \cf9 count\cf0 ]; i++)\
                \{\
                    \cf9 NSLog\cf0 (\cf6 @"currentDate:%@"\cf0 , currentDate);\
                    event = [sortedArray \cf9 objectAtIndex\cf0 :i];\
                    \cf5 if\cf0  ([event.\cf8 eveDueDate\cf0  \cf9 isEqualToDate\cf0 :currentDate])\
                    \{\
                        [tempIDArray \cf9 addObject\cf0 :event];\
                        \cf9 NSLog\cf0 (\cf6 @"array count: %d"\cf0 ,[tempIDArray \cf9 count\cf0 ]);\
                    \}\
                    \cf5 else\cf0 \
                    \{\
                        \
                        \cf7 NSDateFormatter\cf0  *df = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [df \cf9 setDateStyle\cf0 :\cf9 NSDateFormatterMediumStyle\cf0 ];\
                        \cf7 NSDateFormatter\cf0  *dfToDate = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [dfToDate \cf9 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy"\cf0 ];\
                        NSString *dateString;\
                        dateString = [df \cf9 stringFromDate\cf0 :currentDate];\
                        \cf9 NSLog\cf0 (\cf6 @"datestring: %@"\cf0 ,dateString);\
                        \cf5 if\cf0  ([currentDate \cf9 isEqualToDate\cf0 :[dfToDate \cf9 dateFromString\cf0 :\cf6 @"01/01/9999"\cf0 ]])\
                            dateString = \cf6 @"No Due Date"\cf0 ;\
                        \cf7 NSDictionary\cf0  *dict = [\cf7 NSDictionary\cf0  \cf9 dictionaryWithObject\cf0 :tempIDArray \cf9 forKey\cf0 :dateString];\
                        [\cf8 orderedEventsArray\cf0  \cf9 addObject\cf0 :dict];\
                        tempIDArray = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [tempIDArray \cf9 addObject\cf0 :event];\
                        currentDate = event.\cf8 eveDueDate\cf0 ;\
                        \cf9 NSLog\cf0 (\cf6 @"array count: %d"\cf0 ,[tempIDArray \cf9 count\cf0 ]);\
                    \}\
                \}\
                \
                \cf2 //for last one\cf0 \
                \cf7 NSDateFormatter\cf0  *df = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                [df \cf9 setDateStyle\cf0 :\cf9 NSDateFormatterMediumStyle\cf0 ];\
                \cf7 NSDateFormatter\cf0  *dfToDate = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                [dfToDate \cf9 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy"\cf0 ];\
                NSString *dateString;\
                dateString = [df \cf9 stringFromDate\cf0 :currentDate];\
                        \cf9 NSLog\cf0 (\cf6 @"datestring: %@"\cf0 ,dateString);\
                \cf5 if\cf0  ([currentDate \cf9 isEqualToDate\cf0 :[dfToDate \cf9 dateFromString\cf0 :\cf6 @"01/01/9999"\cf0 ]])\
                    dateString = \cf6 @"No Due Date"\cf0 ;\
                \cf7 NSDictionary\cf0  *dict = [\cf7 NSDictionary\cf0  \cf9 dictionaryWithObject\cf0 :tempIDArray \cf9 forKey\cf0 :dateString];\
                [\cf8 orderedEventsArray\cf0  \cf9 addObject\cf0 :dict];\
    \}\
    \cf5 else\cf0 \{\
                \cf7 NSSortDescriptor\cf0  *dateSortDescriptor = [[\cf7 NSSortDescriptor\cf0  \cf9 alloc\cf0 ] \cf9 initWithKey\cf0 :\cf6 @"eveCreatedDate"\cf0 \
                                                                                   \cf9 ascending\cf0 :\cf5 YES\cf0 ];\
                \cf7 NSSortDescriptor\cf0  *timeSortDescriptor = [[\cf7 NSSortDescriptor\cf0  \cf9 alloc\cf0 ]\
                                                        \cf9 initWithKey\cf0 :\cf6 @"eveCreatedTime"\cf0  \cf9 ascending\cf0 :\cf5 YES\cf0 ];\
                \cf7 NSArray\cf0  *sortedArray = [eventsArray \cf9 sortedArrayUsingDescriptors\cf0 :[\cf7 NSArray\cf0  \cf9 arrayWithObjects\cf0 :dateSortDescriptor,timeSortDescriptor,\cf5 nil\cf0 ]];\
                \
                \cf2 //initialist the ordered array\cf0 \
                \cf8 orderedEventsArray\cf0  = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                \
                \cf2 //TODO make This better:\cf0 \
                \cf2 //once the events have been loaded, sort them into an array of dictionaries so they can be grouped on the tableview:\cf0 \
                \
                \cf8 eventSearch\cf0  *event = [sortedArray \cf9 objectAtIndex\cf0 :\cf4 0\cf0 ];\
                \cf7 NSDate\cf0  *currentDate = event.\cf8 eveCreatedDate\cf0 ;\
                \cf7 NSMutableArray\cf0  *tempIDArray = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                \cf5 for\cf0  (\cf5 int\cf0  i = \cf4 0\cf0 ; i < [sortedArray \cf9 count\cf0 ]; i++)\
                \{\
                    \cf9 NSLog\cf0 (\cf6 @"currentDate:%@"\cf0 , currentDate);\
                    event = [sortedArray \cf9 objectAtIndex\cf0 :i];\
                    \cf5 if\cf0  ([event.\cf8 eveCreatedDate\cf0  \cf9 isEqualToDate\cf0 :currentDate])\
                    \{\
                        [tempIDArray \cf9 addObject\cf0 :event];\
                        \cf9 NSLog\cf0 (\cf6 @"array count: %d"\cf0 ,[tempIDArray \cf9 count\cf0 ]);\
                    \}\
                    \cf5 else\cf0 \
                    \{\
                        \
                        \cf7 NSDateFormatter\cf0  *df = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [df \cf9 setDateStyle\cf0 :\cf9 NSDateFormatterMediumStyle\cf0 ];\
                        \cf7 NSDateFormatter\cf0  *dfToDate = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [dfToDate \cf9 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy"\cf0 ];\
                        NSString *dateString;\
                        dateString = [df \cf9 stringFromDate\cf0 :currentDate];\
                        \cf9 NSLog\cf0 (\cf6 @"datestring: %@"\cf0 ,dateString);\
                        \cf5 if\cf0  ([currentDate \cf9 isEqualToDate\cf0 :[dfToDate \cf9 dateFromString\cf0 :\cf6 @"01/01/9999"\cf0 ]])\
                            dateString = \cf6 @"No Due Date"\cf0 ;\
                        \cf7 NSDictionary\cf0  *dict = [\cf7 NSDictionary\cf0  \cf9 dictionaryWithObject\cf0 :tempIDArray \cf9 forKey\cf0 :dateString];\
                        [\cf8 orderedEventsArray\cf0  \cf9 addObject\cf0 :dict];\
                        tempIDArray = [[\cf7 NSMutableArray\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                        [tempIDArray \cf9 addObject\cf0 :event];\
                        currentDate = event.\cf8 eveCreatedDate\cf0 ;\
                        \cf9 NSLog\cf0 (\cf6 @"array count: %d"\cf0 ,[tempIDArray \cf9 count\cf0 ]);\
                    \}\
                \}\
                \
                \cf2 //for last one\cf0 \
                \cf7 NSDateFormatter\cf0  *df = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                [df \cf9 setDateStyle\cf0 :\cf9 NSDateFormatterMediumStyle\cf0 ];\
                \cf7 NSDateFormatter\cf0  *dfToDate = [[\cf7 NSDateFormatter\cf0  \cf9 alloc\cf0 ] \cf9 init\cf0 ];\
                [dfToDate \cf9 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy"\cf0 ];\
                NSString *dateString;\
                dateString = [df \cf9 stringFromDate\cf0 :currentDate];\
                \cf9 NSLog\cf0 (\cf6 @"datestring: %@"\cf0 ,dateString);\
                \cf5 if\cf0  ([currentDate \cf9 isEqualToDate\cf0 :[dfToDate \cf9 dateFromString\cf0 :\cf6 @"01/01/9999"\cf0 ]])\
                    dateString = \cf6 @"No Due Date"\cf0 ;\
                \cf7 NSDictionary\cf0  *dict = [\cf7 NSDictionary\cf0  \cf9 dictionaryWithObject\cf0 :tempIDArray \cf9 forKey\cf0 :dateString];\
                [\cf8 orderedEventsArray\cf0  \cf9 addObject\cf0 :dict];\
    \}\
    \
    \
    \
    \
    \
    \cf2 //NSLog(@"array count: %d",[eventsArray count]);\cf0 \
    \cf2 //NSLog(@"ordered array count: %d",[orderedEventsArray count]);\cf0 \
    \
    \cf5 return\cf0  \cf5 YES\cf0 ;\
\}\
}