{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red92\green38\blue153;
\red46\green13\blue110;\red196\green26\blue22;\red0\green116\blue0;\red38\green71\blue75;\red28\green0\blue207;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\tx560\pardeftab560\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0         \cf2 if\cf0  (!\cf3 eventDetails\cf0 .\cf3 eventType\cf0 )\
        \{\
        \
                \cf4 NSURL\cf0  *url = [[\cf4 NSURL\cf0  \cf5 alloc\cf0 ] \cf5 initWithString\cf0 :[\cf3 appURL\cf0  \cf5 stringByAppendingFormat\cf0 :\cf6 @"/service1.asmx/searchEventsByEventID?eventID=%@"\cf0 ,\cf3 eventDetails\cf0 .\cf3 eventID\cf0 ]];\
                \
                NSError *error;\
                \cf4 NSString\cf0  *xmlString = [[\cf4 NSString\cf0  \cf5 alloc\cf0 ] \cf5 initWithContentsOfURL\cf0 :url \cf5 encoding\cf0 :\cf5 NSUTF8StringEncoding\cf0  \cf5 error\cf0 :\cf2 nil\cf0 ];\
                \cf7 //remove xmlns from the xml file \cf0 \
                xmlString = [xmlString \cf5 stringByReplacingOccurrencesOfString\cf0 :\cf6 @"xmlns"\cf0  \cf5 withString\cf0 :\cf6 @"noNSxml"\cf0 ];\
                \cf5 NSLog\cf0 (\cf6 @"xml string: %@"\cf0 ,xmlString);\
                \cf4 NSData\cf0  *xmlData = [xmlString \cf5 dataUsingEncoding\cf0 :\cf5 NSUTF8StringEncoding\cf0 ];\
                \cf3 DDXMLDocument\cf0  *eventsDocument = [[\cf3 DDXMLDocument\cf0  \cf5 alloc\cf0 ] \cf8 initWithData\cf0 :xmlData \cf8 options\cf0 :\cf9 0\cf0  \cf8 error\cf0 :&error];\
                \
                \cf2 if\cf0  (error)\
                    [[[\cf4 UIAlertView\cf0  \cf5 alloc\cf0 ] \cf5 initWithTitle\cf0 :\cf6 @"Error not load data"\cf0  \cf5 message\cf0 :\cf6 @"Could not retrieve event detais from the server"\cf0  \cf5 delegate\cf0 :\cf2 self\cf0  \cf5 cancelButtonTitle\cf0 :\cf6 @"OK"\cf0  \cf5 otherButtonTitles\cf0 :\cf2 nil\cf0 , \cf2 nil\cf0 ] \cf5 show\cf0 ];\
                    \cf7 //return NO;\cf0 \
        \
                \cf4 NSArray\cf0 * nodes = \cf2 nil\cf0 ;\
                nodes = [[eventsDocument \cf8 rootElement\cf0 ] \cf8 children\cf0 ];\
                \
                \cf4 NSMutableArray\cf0  *eventsArray = [[\cf4 NSMutableArray\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
                \
                \cf2 for\cf0  (\cf3 DDXMLElement\cf0  *element \cf2 in\cf0  nodes)\
                \{ \
                    \cf3 eventSearch\cf0  *currentEvent = [[\cf3 eventSearch\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
                    \cf3 DDXMLElement\cf0  *eveNumber = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveNumber"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveNumber\cf0  = eveNumber.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveStatus = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveStatus"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveStatus\cf0  = eveStatus.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveTitle = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveTitle"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveTitle\cf0  = eveTitle.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *ourContactID = [[element \cf8 nodesForXPath\cf0 :\cf6 @"ourContactID"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 ourContactID\cf0  = ourContactID.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eventType = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eventType"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eventType\cf0  = eventType.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eventType2 = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eventType2"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eventType2\cf0  = eventType2.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eventPriority = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eventPriority"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eventPriority\cf0  = eventPriority.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *companySiteID = [[element \cf8 nodesForXPath\cf0 :\cf6 @"companySiteID"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 companySiteID\cf0  = companySiteID.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eventID = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eventID"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eventID\cf0  = eventID.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *contactID = [[element \cf8 nodesForXPath\cf0 :\cf6 @"contactID"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 contactID\cf0  = contactID.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveComments = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveComments"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveComments\cf0  = eveComments.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveCreatedDate = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveCreatedDate"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    \
                    \cf7 //currentEvent.eveCreatedDate = eveCreatedDate.stringValue;\cf0 \
                    \
                    \cf3 DDXMLElement\cf0  *eveCreatedTime = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveCreatedTime"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveCreatedTime\cf0  = eveCreatedTime.\cf4 stringValue\cf0 ;        \
                    \cf3 DDXMLElement\cf0  *eveDueDate = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveDueDate"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    \
                    \cf4 NSString\cf0  *stringDate = eveDueDate.\cf4 stringValue\cf0 ;\
                    \cf2 if\cf0  ([stringDate \cf5 isEqualToString\cf0 :\cf6 @""\cf0 ])\
                        stringDate = \cf6 @"01/01/9999 00:00:00"\cf0 ;\
                    \cf4 NSDateFormatter\cf0  *df = [[\cf4 NSDateFormatter\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
                    [df \cf5 setDateFormat\cf0 :\cf6 @"dd/MM/yyyy HH:mm:ss"\cf0 ];\
                    currentEvent.\cf3 eveDueDate\cf0  = [df \cf5 dateFromString\cf0 :stringDate];\
                    \
                    \cf4 NSString\cf0  *stringCreatedDate = eveCreatedDate.\cf4 stringValue\cf0 ;\
                    \cf2 if\cf0  ([stringCreatedDate \cf5 isEqualToString\cf0 :\cf6 @""\cf0 ])\
                        stringCreatedDate = \cf6 @"01/01/9999 00:00:00"\cf0 ;\
                    currentEvent.\cf3 eveCreatedDate\cf0  = [df \cf5 dateFromString\cf0 :stringCreatedDate];\
                    \
                    \cf3 DDXMLElement\cf0  *eveDueTime = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveDueTime"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveDueTime\cf0  = eveDueTime.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveEndDate = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveEndDate"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveEndDate\cf0  = eveEndDate.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveEndTime = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveEndTime"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveEndTime\cf0  = eveEndTime.\cf4 stringValue\cf0 ;\
                    \cf3 DDXMLElement\cf0  *eveCreatedBy = [[element \cf8 nodesForXPath\cf0 :\cf6 @"eveCreatedBy"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                    currentEvent.\cf3 eveCreatedBy\cf0  = eveCreatedBy.\cf4 stringValue\cf0 ;\
                    \
                    [eventsArray \cf5 addObject\cf0 :currentEvent];\
                \}\
            \cf2 if\cf0  ([eventsArray \cf5 count\cf0 ] > \cf9 0\cf0 )\
                \cf3 eventDetails\cf0  = [eventsArray \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
        \}\
\
\
\
\
\
\
        \cf2 if\cf0  (!\cf3 company\cf0 )\
        \{\
        \
            \cf7 // show the network activity indicator again\cf0 \
            \cf3 company\cf0  = [[\cf3 companySearch\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
            \cf7 //[app setNetworkActivityIndicatorVisible:YES]; \cf0 \
            url = [[\cf4 NSURL\cf0  \cf5 alloc\cf0 ] \cf5 initWithString\cf0 :[\cf3 appURL\cf0  \cf5 stringByAppendingFormat\cf0 :\cf6 @"/service1.asmx/searchCompaniesByCompanySiteID?companySiteID=%@"\cf0 ,\cf3 eventDetails\cf0 .\cf3 companySiteID\cf0 ]];\
            xmlString = [[\cf4 NSString\cf0  \cf5 alloc\cf0 ] \cf5 initWithContentsOfURL\cf0 :url \cf5 encoding\cf0 :\cf5 NSUTF8StringEncoding\cf0  \cf5 error\cf0 :\cf2 nil\cf0 ];\
            \cf7 //remove xmlns from the xml file \cf0 \
            xmlString = [xmlString \cf5 stringByReplacingOccurrencesOfString\cf0 :\cf6 @"xmlns"\cf0  \cf5 withString\cf0 :\cf6 @"noNSxml"\cf0 ];\
            \cf5 NSLog\cf0 (\cf6 @"xml: %@  end of xml"\cf0 , xmlString);\
            xmlData = [xmlString \cf5 dataUsingEncoding\cf0 :\cf5 NSUTF8StringEncoding\cf0 ];\
            \cf3 DDXMLDocument\cf0  *companiesDocument = [[\cf3 DDXMLDocument\cf0  \cf5 alloc\cf0 ] \cf8 initWithData\cf0 :xmlData \cf8 options\cf0 :\cf9 0\cf0  \cf8 error\cf0 :&error];\
            \cf7 //[app setNetworkActivityIndicatorVisible:NO]; \cf0 \
\
            \cf4 NSArray\cf0 * nodes2 = \cf2 nil\cf0 ;\
            nodes2 = [[companiesDocument \cf8 rootElement\cf0 ] \cf8 children\cf0 ];\
            \
            \cf2 for\cf0  (\cf3 DDXMLElement\cf0  *element \cf2 in\cf0  nodes2)\
            \{ \
                \cf3 company\cf0  = [[\cf3 companySearch\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
                \cf3 DDXMLElement\cf0  *companySiteID = [[element \cf8 nodesForXPath\cf0 :\cf6 @"companySiteID"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 companySiteID\cf0  = companySiteID.\cf4 stringValue\cf0 ;\
                \cf3 DDXMLElement\cf0  *coaCompanyName = [[element \cf8 nodesForXPath\cf0 :\cf6 @"coaCompanyName"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 coaCompanyName\cf0  = coaCompanyName.\cf4 stringValue\cf0 ;\
                \cf3 DDXMLElement\cf0  *cosSiteName = [[element \cf8 nodesForXPath\cf0 :\cf6 @"cosSiteName"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 cosSiteName\cf0  = cosSiteName.\cf4 stringValue\cf0 ;     \
                \cf3 DDXMLElement\cf0  *cosDescription = [[element \cf8 nodesForXPath\cf0 :\cf6 @"cosDescription"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 cosDescription\cf0  = cosDescription.\cf4 stringValue\cf0 ;  \
                \cf3 DDXMLElement\cf0  *addStreetAddress = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addStreetAddress"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addStreetAddress\cf0  = addStreetAddress.\cf4 stringValue\cf0 ; \
                \cf3 DDXMLElement\cf0  *addStreetAddress2 = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addStreetAddress2"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addStreetAddress2\cf0  = addStreetAddress2.\cf4 stringValue\cf0 ; \
                \cf3 DDXMLElement\cf0  *addStreetAddress3 = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addStreetAddress3"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addStreetAddress3\cf0  = addStreetAddress3.\cf4 stringValue\cf0 ; \
                \cf3 DDXMLElement\cf0  *addTown = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addTown"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addTown\cf0  = addTown.\cf4 stringValue\cf0 ;  \
                \cf3 DDXMLElement\cf0  *addCounty = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addCounty"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addCounty\cf0  = addCounty.\cf4 stringValue\cf0 ; \
                \cf3 DDXMLElement\cf0  *addPostCode = [[element \cf8 nodesForXPath\cf0 :\cf6 @"addPostCode"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 addPostCode\cf0  = addPostCode.\cf4 stringValue\cf0 ; \
                \cf3 DDXMLElement\cf0  *couCountryName = [[element \cf8 nodesForXPath\cf0 :\cf6 @"couCountryName"\cf0  \cf8 error\cf0 :\cf2 nil\cf0 ] \cf5 objectAtIndex\cf0 :\cf9 0\cf0 ];\
                \cf3 company\cf0 .\cf3 couCountryName\cf0  = couCountryName.\cf4 stringValue\cf0 ; \
            \}\
\
        \}\
\
\
\
\
        \cf7 /*\
        // get the attchacment from the server\
        url = [[NSURL alloc] initWithString:[appURL stringByAppendingFormat:@"/service1.asmx/searchAttachmentsByEventID?eventID=%@",eventDetails.eventID]];\
        xmlString = [[NSString alloc] initWithContentsOfURL:url encoding:NSUTF8StringEncoding error:nil];\
\
        //remove xmlns from the xml file \
        xmlString = [xmlString stringByReplacingOccurrencesOfString:@"xmlns" withString:@"noNSxml"];\
        xmlData = [xmlString dataUsingEncoding:NSUTF8StringEncoding];\
        DDXMLDocument *attachmentsDocument = [[DDXMLDocument alloc] initWithData:xmlData options:0 error:&error];\
        \
        if (context == nil) \{ context = [(AppDelegate *)[[UIApplication sharedApplication] delegate] managedObjectContext]; \}\
\
        // save newly retrieved events to coredata\
        NSArray* nodes = nil;\
        nodes = [[attachmentsDocument rootElement] children];\
        \
        for (DDXMLElement *element in nodes)\
        \{ \
            Attachment *attachment = (Attachment *)[NSEntityDescription insertNewObjectForEntityForName:@"Attachment" inManagedObjectContext:context]; \
            DDXMLElement *eventID = [[element nodesForXPath:@"eventID" error:nil] objectAtIndex:0];\
            attachment.eventID = eventID.stringValue;\
            DDXMLElement *attachmentID = [[element nodesForXPath:@"attachmentID" error:nil] objectAtIndex:0];\
            attachment.attachmentID = attachmentID.stringValue;\
            DDXMLElement *attDescription = [[element nodesForXPath:@"attDescription" error:nil] objectAtIndex:0];\
            attachment.attDescription = attDescription.stringValue;\
            DDXMLElement *atyMnemonic = [[element nodesForXPath:@"atyMnemonic" error:nil] objectAtIndex:0];\
            attachment.atyMnemonic = atyMnemonic.stringValue;\
            DDXMLElement *attOriginalFilename = [[element nodesForXPath:@"attOriginalFilename" error:nil] objectAtIndex:0];\
            attachment.attOriginalFilename = attOriginalFilename.stringValue;\
            [attachmentArray addObject:attachment];\
        \}\
    \
        \
        if (!contact)\
        \{\
            contact = [[contactSearch alloc] init];\
            //get contact from server\
            url = [[NSURL alloc] initWithString:[appURL stringByAppendingFormat:@"/service1.asmx/searchContactsByContactID?searchContactID=%@",eventDetails.contactID]];\
            xmlString = [[NSString alloc] initWithContentsOfURL:url encoding:NSUTF8StringEncoding error:nil];\
            //remove xmlns from the xml file \
            xmlString = [xmlString stringByReplacingOccurrencesOfString:@"xmlns" withString:@"noNSxml"];\
            NSLog(@" xml string: %@ end of xml string",xmlString);\
            NSLog(@"contact id: %@",eventDetails.contactID);\
            xmlData = [xmlString dataUsingEncoding:NSUTF8StringEncoding];\
            DDXMLDocument *contactsDocument = [[DDXMLDocument alloc] initWithData:xmlData options:0 error:&error];\
            \
            NSArray* nodes = nil;\
            nodes = [[contactsDocument rootElement] children];\
            NSLog(@"contact name: %d",[nodes count]);\
            for (DDXMLElement *element in nodes)\
            \{ \
                DDXMLElement *contactID = [[element nodesForXPath:@"contactID" error:nil] objectAtIndex:0];\
                contact.contactID = contactID.stringValue;\
                DDXMLElement *conTitle = [[element nodesForXPath:@"conTitle" error:nil] objectAtIndex:0];\
                contact.conTitle = conTitle.stringValue;\
                DDXMLElement *conFirstName = [[element nodesForXPath:@"conFirstName" error:nil] objectAtIndex:0];\
                contact.conFirstName = conFirstName.stringValue;\
                DDXMLElement *conMiddleName = [[element nodesForXPath:@"conMiddleName" error:nil] objectAtIndex:0];\
                contact.conMiddleName = conMiddleName.stringValue;\
                DDXMLElement *conSurname = [[element nodesForXPath:@"conSurname" error:nil] objectAtIndex:0];\
                contact.conSurname = conSurname.stringValue;\
                \
                DDXMLElement *companySiteID = [[element nodesForXPath:@"companySiteID" error:nil] objectAtIndex:0];\
                contact.companySiteID = companySiteID.stringValue;\
                DDXMLElement *cosDescription = [[element nodesForXPath:@"cosDescription" error:nil] objectAtIndex:0];\
                contact.cosDescription = cosDescription.stringValue;\
                DDXMLElement *cosSiteName = [[element nodesForXPath:@"cosSiteName" error:nil] objectAtIndex:0];\
                contact.cosSiteName = cosSiteName.stringValue;\
                NSLog(@"contact name: %@",contact.conFirstName);\
            \}\
            \
            \
            \
        \}\
        */\
\
\
\
/*\
    //turn on the network activity indicator while the data is being retrieved from the server\
    UIApplication *app = [UIApplication sharedApplication];  \
    [app setNetworkActivityIndicatorVisible:YES]; \
    \
    UIActivityIndicatorView *refreshSpinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\
    refreshSpinner.frame = CGRectMake(cellLblOurContact.frame.size.width / 2 - 10, cellLblOurContact.frame.size.height / 2 - 10, 20, 20);\
    refreshSpinner.hidesWhenStopped = YES;\
    [cellLblOurContact addSubview:refreshSpinner];\
    [refreshSpinner startAnimating];\
    \
    //get contact data from the server server asynchronously\
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^\{  \
        NSURL *url;\
        NSString *xmlString;\
        NSData *xmlData;      \
        NSError *error;\
        // retrieve our contact from the server:\
        ourContact = [[contactSearch alloc] init];\
        //get contact from server\
        url = [[NSURL alloc] initWithString:[appURL stringByAppendingFormat:@"/service1.asmx/searchContactsByContactIDABL?searchContactID=%@",eventDetails.ourContactID]];\
        NSLog(@"our contact ID: %@", eventDetails.ourContactID);\
        \
        \
        xmlString = [[NSString alloc] initWithContentsOfURL:url encoding:NSUTF8StringEncoding error:nil];\
        \
        \
        \
        //remove xmlns from the xml file \
        xmlString = [xmlString stringByReplacingOccurrencesOfString:@"xmlns" withString:@"noNSxml"];\
        NSLog(@" xml string: %@ end of xml string",xmlString);\
        NSLog(@"contact id: %@",eventDetails.contactID);\
        xmlData = [xmlString dataUsingEncoding:NSUTF8StringEncoding];\
        DDXMLDocument *ourContactsDocument = [[DDXMLDocument alloc] initWithData:xmlData options:0 error:&error];\
        \
        NSArray* nodes = nil;\
        nodes = [[ourContactsDocument rootElement] children];\
        NSLog(@"contact name: %d",[nodes count]);\
        for (DDXMLElement *element in nodes)\
        \{ \
            DDXMLElement *contactID = [[element nodesForXPath:@"contactID" error:nil] objectAtIndex:0];\
            ourContact.contactID = contactID.stringValue;\
            DDXMLElement *conTitle = [[element nodesForXPath:@"conTitle" error:nil] objectAtIndex:0];\
            ourContact.conTitle = conTitle.stringValue;\
            DDXMLElement *conFirstName = [[element nodesForXPath:@"conFirstName" error:nil] objectAtIndex:0];\
            ourContact.conFirstName = conFirstName.stringValue;\
            DDXMLElement *conMiddleName = [[element nodesForXPath:@"conMiddleName" error:nil] objectAtIndex:0];\
            ourContact.conMiddleName = conMiddleName.stringValue;\
            DDXMLElement *conSurname = [[element nodesForXPath:@"conSurname" error:nil] objectAtIndex:0];\
            ourContact.conSurname = conSurname.stringValue;\
            \
            DDXMLElement *companySiteID = [[element nodesForXPath:@"companySiteID" error:nil] objectAtIndex:0];\
            ourContact.companySiteID = companySiteID.stringValue;\
            DDXMLElement *cosDescription = [[element nodesForXPath:@"cosDescription" error:nil] objectAtIndex:0];\
            ourContact.cosDescription = cosDescription.stringValue;\
            DDXMLElement *cosSiteName = [[element nodesForXPath:@"cosSiteName" error:nil] objectAtIndex:0];\
            ourContact.cosSiteName = cosSiteName.stringValue;\
            NSLog(@"our contact name: %@",ourContact.conFirstName);\
        \}\
        dispatch_sync(dispatch_get_main_queue(), ^\{\
            \
            [app setNetworkActivityIndicatorVisible:NO]; \
            [refreshSpinner stopAnimating];\
            \
            // if the data was not retrieved display an error\
            if (error)\
            \{\
                [[[UIAlertView alloc] initWithTitle:@"Data Fetch" message:@"Could not retrieve our contact details data from server" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil] show];\
            \}\
            */\
\
\
\cf0             \cf7 /*\
            //needed?\
            //[self.tableView reloadData];\
        \});\
    \});*/}